services:
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"   # puerto AMQP
      - "15672:15672" # consola web
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
    networks:
      - rabbitnet
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  # Python producers (runs once, sends messages then exits)
  py-producers:
    build: ./py
    container_name: py-producers
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - rabbitnet
    volumes:
      - ./py:/app
    command: sh -c "python producer/order.service.py && python producer/inventory.service.py && python producer/billing.service.py && python producer/delivery.service.py"
    restart: "no"  # Don't restart, producers run once

  # API service for WebSocket and message monitoring
  api-service:
    build: ./api
    container_name: api-service
    ports:
      - "3001:3001"
    depends_on:
      rabbitmq:
        condition: service_healthy
      py-producers:
        condition: service_completed_successfully
    networks:
      - rabbitnet
    environment:
      RABBITMQ_URL: amqp://admin:admin123@rabbitmq:5672
    restart: unless-stopped

  # JavaScript consumers (runs continuously)
  js-consumers:
    build: ./js
    container_name: js-consumers
    depends_on:
      rabbitmq:
        condition: service_healthy
      api-service:
        condition: service_started
    networks:
      - rabbitnet
    volumes:
      - ./js:/app
      - /app/node_modules
    command: sh -c "node consumer/kitchen.service.js & node consumer/notification.service.js & node consumer/billing.service.js & node consumer/delivery.service.js"
    restart: unless-stopped

  # Web GUI for monitoring messages
  rabbitmq-gui:
    build: ./rabbitmq-gui
    container_name: rabbitmq-gui
    ports:
      - "3000:80"
    networks:
      - rabbitnet
    depends_on:
      rabbitmq:
        condition: service_healthy
      api-service:
        condition: service_started
      py-producers:
        condition: service_completed_successfully

networks:
  rabbitnet:
    driver: bridge